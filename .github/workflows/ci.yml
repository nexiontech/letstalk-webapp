name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  lint-and-format:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint
        continue-on-error: true

      - name: Check Prettier formatting
        run: npm run format:check

  build:
    name: Build Project
    runs-on: ubuntu-latest
    needs: lint-and-format
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/
          retention-days: 7

  lighthouse:
    name: SEO & Performance Checks
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Serve built files
        run: |
          npm install -g serve
          serve -s dist -l 3000 &
          sleep 10
          # Wait for server to be ready
          curl --retry 10 --retry-delay 1 --retry-connrefused http://localhost:3000 || echo "Server check completed"

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v12
        with:
          configPath: './.lighthouserc.json'
          uploadArtifacts: false
          temporaryPublicStorage: false
        continue-on-error: true

      - name: Generate Lighthouse summary
        if: always()
        run: |
          echo "## 🚀 Lighthouse Performance Report" > lighthouse-summary.md
          echo "" >> lighthouse-summary.md
          echo "### SEO & Performance Analysis" >> lighthouse-summary.md
          echo "- **Status**: Lighthouse scan completed" >> lighthouse-summary.md
          echo "- **Timestamp**: $(date)" >> lighthouse-summary.md
          echo "- **Build**: ${{ github.run_number }}" >> lighthouse-summary.md
          echo "" >> lighthouse-summary.md

          # Check if lighthouse results exist
          if [ -d ".lighthouseci" ]; then
            echo "✅ Lighthouse reports generated successfully" >> lighthouse-summary.md
            echo "- **Reports location**: .lighthouseci/" >> lighthouse-summary.md
            ls -la .lighthouseci/ >> lighthouse-summary.md 2>/dev/null || echo "No detailed files found" >> lighthouse-summary.md
          else
            echo "⚠️ Lighthouse reports not found in expected location" >> lighthouse-summary.md
          fi

          echo "" >> lighthouse-summary.md
          echo "### Performance Metrics" >> lighthouse-summary.md
          echo "- **Bundle Size**: $(du -sh dist/ 2>/dev/null | cut -f1 || echo 'Unknown')" >> lighthouse-summary.md
          echo "- **Build Time**: Optimized for production" >> lighthouse-summary.md

      - name: Upload Lighthouse artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-report-${{ github.run_number }}
          path: |
            lighthouse-summary.md
            .lighthouseci/
          retention-days: 30
        continue-on-error: true

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Generate security summary
        run: |
          echo "## 🔒 Security Audit Results" > security-summary.md
          echo "" >> security-summary.md

          if npm audit --audit-level=moderate; then
            echo "✅ No security vulnerabilities found!" >> security-summary.md
          else
            echo "⚠️ Security vulnerabilities detected!" >> security-summary.md
            echo "" >> security-summary.md
            echo "### Audit Details:" >> security-summary.md
            echo "\`\`\`" >> security-summary.md
            npm audit --audit-level=moderate 2>&1 || true >> security-summary.md
            echo "\`\`\`" >> security-summary.md
            echo "" >> security-summary.md
            echo "### 🔧 How to fix:" >> security-summary.md
            echo "Run \`npm audit fix\` to automatically fix vulnerabilities." >> security-summary.md
          fi

      - name: Upload security audit results
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-${{ github.run_number }}
          path: security-summary.md
          retention-days: 30

  test-coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: |
          echo "## 🧪 Test Coverage Report" > coverage-summary.md
          echo "" >> coverage-summary.md

          if npm run test:coverage; then
            echo "✅ All tests passed!" >> coverage-summary.md
            echo "" >> coverage-summary.md

            # Check if coverage directory exists
            if [ -d "coverage" ]; then
              echo "### Coverage Summary:" >> coverage-summary.md
              echo "\`\`\`" >> coverage-summary.md
              cat coverage/lcov-report/index.html | grep -o 'class="strong">[0-9.]*%' | head -4 | sed 's/class="strong">/- /' >> coverage-summary.md 2>/dev/null || echo "Coverage details not available" >> coverage-summary.md
              echo "\`\`\`" >> coverage-summary.md
            else
              echo "### Coverage files not generated" >> coverage-summary.md
            fi
          else
            echo "⚠️ Some tests failed or no tests found" >> coverage-summary.md
            echo "" >> coverage-summary.md
            echo "### Test Status:" >> coverage-summary.md
            echo "Tests may not be configured yet or some tests are failing." >> coverage-summary.md
          fi
        continue-on-error: true

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report-${{ github.run_number }}
          path: |
            coverage/
            coverage-summary.md
          retention-days: 30
        continue-on-error: true

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            let summary = '🧪 Test coverage analysis completed.';

            try {
              summary = fs.readFileSync('coverage-summary.md', 'utf8');
            } catch (error) {
              summary = '🧪 Test coverage report will be available once tests are configured.';
            }

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `${summary}\n\n---\n*Test coverage analysis completed automatically*`
            });
