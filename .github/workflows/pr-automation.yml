name: PR Automation

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  auto-label:
    name: Auto Label PR
    runs-on: ubuntu-latest
    # Only run on PRs from the same repository (not forks)
    if: github.event.pull_request.head.repo.full_name == github.repository
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Auto label based on files
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });

            const labels = [];
            const fileChanges = files.map(file => file.filename);

            if (fileChanges.some(file => file.includes('components/'))) {
              labels.push('üß© components');
            }
            if (fileChanges.some(file => file.includes('.css') || file.includes('tailwind') || file.includes('styles'))) {
              labels.push('üé® styling');
            }
            if (fileChanges.some(file => file.includes('package.json') || file.includes('vite.config') || file.includes('tsconfig'))) {
              labels.push('‚öôÔ∏è config');
            }
            if (fileChanges.some(file => file.includes('.md') || file.includes('README'))) {
              labels.push('üìö documentation');
            }
            if (fileChanges.some(file => file.includes('.github/'))) {
              labels.push('ü§ñ ci/cd');
            }
            if (fileChanges.some(file => file.includes('pages/') || file.includes('routes'))) {
              labels.push('üìÑ pages');
            }
            if (fileChanges.some(file => file.includes('public/') || file.includes('assets/'))) {
              labels.push('üñºÔ∏è assets');
            }

            const totalChanges = files.reduce((acc, file) => acc + file.changes, 0);
            if (totalChanges < 10) {
              labels.push('size/XS');
            } else if (totalChanges < 30) {
              labels.push('size/S');
            } else if (totalChanges < 100) {
              labels.push('size/M');
            } else if (totalChanges < 500) {
              labels.push('size/L');
            } else {
              labels.push('size/XL');
            }

            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: labels
              });
            }

  pr-size-analysis:
    name: PR Size Analysis
    runs-on: ubuntu-latest
    # Only run on PRs from the same repository (not forks)
    if: github.event.pull_request.head.repo.full_name == github.repository
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Analyze PR size
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });

            const totalFiles = files.length;
            const totalAdditions = files.reduce((acc, file) => acc + file.additions, 0);
            const totalDeletions = files.reduce((acc, file) => acc + file.deletions, 0);
            const totalChanges = totalAdditions + totalDeletions;

            let sizeEmoji = 'üìè';
            let sizeComment = '';

            if (totalChanges < 10) {
              sizeEmoji = 'üê≠';
              sizeComment = 'Tiny PR - Quick review expected!';
            } else if (totalChanges < 30) {
              sizeEmoji = 'üê±';
              sizeComment = 'Small PR - Easy to review';
            } else if (totalChanges < 100) {
              sizeEmoji = 'üêï';
              sizeComment = 'Medium PR - Moderate review time';
            } else if (totalChanges < 500) {
              sizeEmoji = 'üêò';
              sizeComment = 'Large PR - Consider breaking into smaller PRs';
            } else {
              sizeEmoji = 'ü¶ï';
              sizeComment = 'Extra Large PR - Definitely consider breaking this down!';
            }

            const comment = `## ${sizeEmoji} PR Analysis

            ### üìä Size Metrics
            - **Files changed:** ${totalFiles}
            - **Lines added:** +${totalAdditions}
            - **Lines deleted:** -${totalDeletions}
            - **Total changes:** ${totalChanges}

            ### üí° ${sizeComment}

            ---
            *This analysis is automatically generated.*`;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Quality checks
        run: |
          echo "üîç Running quality checks..."

          if grep -r "TODO\|FIXME" src/ --exclude-dir=node_modules || true; then
            echo "‚ö†Ô∏è Found TODO/FIXME comments - consider addressing them"
          fi

          if grep -r "console\.log" src/ --exclude-dir=node_modules || true; then
            echo "‚ö†Ô∏è Found console.log statements - consider removing them"
          fi

          find src/ -type f -size +100k -exec echo "‚ö†Ô∏è Large file found: {}" \;

          echo "‚úÖ Quality checks completed"
